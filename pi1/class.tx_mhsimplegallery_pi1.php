<?php/****************************************************************  Copyright notice**  (c) 2007 Martin Hesse <mail@martin-hesse.info>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************/require_once (PATH_tslib. 'class.tslib_pibase.php');require_once (PATH_t3lib. 'class.t3lib_basicfilefunc.php');require_once (PATH_t3lib. 'class.t3lib_stdgraphic.php');/** * Plugin 'Simple Gallery' for the 'mh_simplegallery' extension. * * @author	Martin Hesse <mail@martin-hesse.info> * @package	TYPO3 * @subpackage	tx_mhsimplegallery */class tx_mhsimplegallery_pi1 extends tslib_pibase {	var $prefixId        = 'tx_mhsimplegallery_pi1';		// Same as class name	var $scriptRelPath   = 'pi1/class.tx_mhsimplegallery_pi1.php';	// Path to this script relative to the extension dir.	var $extKey          = 'mh_simplegallery';	// The extension key.	var $pi_checkCHash   = true;	#var $pi_USER_INT_obj = true;		var $dbTable1        = 'tx_mhsimplegallery_images';  var $dbTable2        = 'tx_mhsimplegallery_categories';  var $dbTable3        = 'tx_mhsimplegallery_comments';  var $dbTable4        = 'tx_mhsimplegallery_ratings';    /**	 * The main method of the PlugIn	 *	 * @param	string		$content: The PlugIn content	 * @param	array		$conf: The PlugIn configuration	 * @return	The content that is displayed on the website	 */	function main($content,$conf)	{		$this->conf = $conf;		$this->pi_setPiVarDefaults();		$this->pi_loadLL();	    // Disable Cache, only for development    $GLOBALS["TSFE"]->set_no_cache();        // Flexformdaten beziehen ...    $this->pi_initPIflexForm();        $this->lConf = array(); // Setup our storage array...        // Assign the flexform data to a local variable for easier access    $piFlexForm = $this->cObj->data['pi_flexform'];        // Traverse the entire array based on the language...    // and assign each configuration option to $this->lConf array...    foreach ( $piFlexForm['data'] as $sheet => $data ) {      foreach ( $data as $lang => $value ) {        foreach ( $value as $key => $val ) {          $this->lConf[$key] = $this->pi_getFFvalue($piFlexForm, $key, $sheet);        }      }    }        $ts_tpl        = $this->cObj->fileResource($this->conf['templateFile']);    $flexform_tpl  = $this->cObj->fileResource('uploads/tx_mhsimplegallery/' . $this->lConf['template_file']);         // Template wird geladen ...    isset($flexform_tpl) ? $this->templateCode = $flexform_tpl : $this->templateCode = $ts_tpl;       // Wenn nicht vorhanden dann Fehlermeldung ausspucken ...    if (!$this->templateCode) {    	return '<h1>Error</h1><p>No Template found for ' . $this->extKey . '</p><p>Notice: <ul><li>to change your template path in the setup use:<br /><b>plugin.tx_mhsimplegallery_pi1.templateFile</b> = path/to/template.html</li><li>you can use the default-template by adding to your root-template (include_static) "Simple Gallery (Static) ..".<br /><b>It is highly recommend to do that</b>!</li></ul></p>';    }        // Jeweilige Modul beziehen (LIST,TAGCLOUD etc.)    $modul = explode(',',$this->lConf['what_to_display']);        // TS "pid_list"    $pid = $this->pi_getPidList($this->cObj->data['pages'],$this->cObj->data['recursive']);    $this->pid = $pid;        // TS-Vars auslesen, falls in der Flexform schon gesetzt dann werden diese bevorzugt!    $tsVarArray = array(      'search_not_found',    );                foreach($tsVarArray AS $temp_tsVar) {      $this->lConf[$temp_tsVar] ? $this->$temp_tsVar = $this->lConf[$temp_tsVar] : $this->$temp_tsVar = trim($this->cObj->stdWrap($this->conf[$temp_tsVar],$this->conf[$temp_tsVar.'.']));    }        // Cat-IDs welche dargestellt werden sollen    $categories = $this->lConf['display_categories'];    // Modul filtern und entsprechende Methode aufrufen    foreach($modul AS $temp) {      switch ($temp) {        case 'LIST':          $content .= $this->displayAll($pid,$categories);        break;        case 'SINGLE':          $content .= $this->initSingle($pid);        break;        case 'ADD':          $content .= $this->displayForm($pid);        break;        case 'COMMENTS':          $content .= $this->initComments($pid);        break;        case 'EDIT':          $content .= $this->editForm($pid);        break;      }    }        // Get the shit out    return $this->pi_wrapInBaseClass($content);	}				function initSingle($pid) {        $getUID   = $this->piVars['image'];    $content  = FALSE;    if(isset($getUID)) {      $content = $this->getImage($getUID);    }        return $content;  }				/**	 * Get a overview of Categories and images	 *	 * @param	int $pid: The Page-ID	 * @param	array/string $catId: categories	 * 	 	 * @return	The content that is displayed on the website	 */	function displayAll($pid,$categories = FALSE) {        $getCat   = $this->piVars['category'];         if(isset($getCat)) {      $content = $this->listImages($pid,$getCat);    } else {      $content = $this->initCategories($pid,$categories);    }        return $content;  }        /**	 * Initialise the categories	 *	 * @param	int $pid: The Page-ID	 * @param	array/string $categories: categories	 * 	 	 * @return	sql-query	 */  function initCategories($pid,$categories) {        $categories = (strlen($categories) > 0) ? explode(',',$categories) : FALSE;        $query  = FALSE; #init        if($categories) {      $i        = 0; #init      $query    = 'AND ';      foreach($categories AS $value) {        if($i>0) { $query.= ' OR '; $i=0; }        $query  .= 'FIND_IN_SET(' . $value . ',f.kategorie)';        $i++;      }    }        $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        *      FROM        $this->dbTable2      WHERE        `deleted` = 0        AND        `hidden`  = 0        AND        `pid` IN (" . intval($pid). ")        $query      ORDER BY        `sorting` ASC    ");        return $this->getCategories($pid,$res);  }        /**	 * Displays the categories	 *	 * @param	$res: sql-query	 * 	 	 * @return The content that is displayed on the website	 */  function getCategories($pid,$res) {        $content = ''; #init        if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {          $template = $this->cObj->getSubpart($this->templateCode,"###CATEGORIES###");      $subpart  = $this->cObj->getSubpart($template,"###ITEMS###");            $stats = array(); #init            while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {                if($row['path']) {          $this->initPath($row['path'],$row['uid'],$pid);        }                $stats = $this->getStatistic($pid,$row['uid'],'categories');                $markerArray['###STATS_COUNT_IMAGES###']  = ($stats['count'] >= '1') ? $stats['count'] : '0';        $markerArray['###STATS_LAST_IMAGE###']    = date($this->conf['dateConf'],$stats['last_added']);        $markerArray['###NAME###']                = htmlentities($row['name']);        $markerArray['###TOP_IMAGE###']           = $this->getTopImage($pid,$row['uid']);        $markerArray['###LATEST_IMAGES###']       = $this->getLatestImages($pid,$row['uid']);        $markerArray['###LINK_TO_GALLERY###']     = $this->pi_linkTP($this->cObj->stdWrap($this->pi_getLL('link_to_gallery'),$this->conf['link_to_gallery.']),array($this->prefixId . '[category]' => $row['uid']),'',$GLOBALS['TSFE']->id);                $content .= $this->cObj->substituteMarkerArrayCached($subpart, $markerArray);        $subpartArray['###ITEMS###'] = $content;      }    }        return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);  }        function getCategorieSelectField($pid) {      $content = ''; #init        $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        *      FROM        $this->dbTable2      WHERE        `deleted` = 0        AND        `hidden`  = 0        AND        `pid` IN (" . intval($pid). ")      ORDER BY        `name` ASC    ");        if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {      $content .= '<select name="mh_simplegallery_postVar[category]" size="1">';      while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {        if($row['public'] == '0' && $row['cruser_id'] != $GLOBALS['TSFE']->fe_user->user['uid']) {          continue;        }        $content .= '<option value="' . $row['uid'] . '">' . $row['name'] . '</option>';      }      $content .= '</select>';    }        return $content;  }      function getTopImage($pid,$uid) {       $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        *      FROM        $this->dbTable1      WHERE        `deleted` = 0        AND        `hidden`  = 0        AND        `pid` IN (" . intval($pid). ")        AND        `category` = " . intval($uid) . "      ORDER BY        `rating` ASC      LIMIT 1    ");        if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {          $row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);       $imgTSConfig                    = array();      $imgTSConfig['file']            = 'uploads/tx_mhsimplegallery/' . $row['image'];      $imgTSConfig['file.']['width']  = $this->conf['topImageMaxWidth'];      $imgTSConfig['file.']['height'] = $this->conf['topImageMaxHeight'];      $imgTSConfig['altText']         = htmlentities($row['title']);      $imgTSConfig['titleText']       = htmlentities($row['title']);      $imgTSConfig['params']          = $this->conf['topImageParams'];            $content = $this->pi_linkTP($this->cObj->IMAGE($imgTSConfig),array($this->prefixId.'[image]'=> $row['uid']),'',$this->conf['single_pid']);        } else {          $imgTSConfig                    = array();      $imgTSConfig['file']            = $this->conf['noTopImage'];      $imgTSConfig['file.']['width']  = $this->conf['topImageMaxWidth'];      $imgTSConfig['file.']['height'] = $this->conf['topImageMaxHeight'];      $imgTSConfig['params']          = $this->conf['topImageParams'];            $content = $this->cObj->IMAGE($imgTSConfig);    }    return $content;  }      function getLatestImages($pid,$uid,$width=FALSE,$height=FALSE,$single_pid = FALSE) {      $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        *      FROM        $this->dbTable1      WHERE        `deleted` = 0        AND        `hidden`  = 0        AND        `pid` IN (" . intval($pid). ")        AND        `category` = " . intval($uid) . "      ORDER BY        `crdate` DESC      LIMIT " . $this->conf['latestImageLimit']);        $content = ''; #init    $single_pid = $single_pid ? $single_pid : $this->conf['single_pid'];        if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {          while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {        $imgTSConfig                    = array();        $imgTSConfig['file']            = 'uploads/tx_mhsimplegallery/' . $row['image'];        $imgTSConfig['file.']['width']  = $width ? $width : $this->conf['latestImageMaxWidth'];        $imgTSConfig['file.']['height'] = $height ? $height : $this->conf['latestImageMaxHeight'];        $imgTSConfig['altText']         = htmlentities($row['title']);        $imgTSConfig['titleText']       = htmlentities($row['title']);        $imgTSConfig['params']          = $this->conf['latestImageParams'];                $content .= $this->pi_linkTP($this->cObj->IMAGE($imgTSConfig),array($this->prefixId.'[image]'=> $row['uid']),'',$single_pid);      }    } else {      $content = $this->conf['error_noLatestImages'];    }        return $content;  }			function getStatistic($pid,$uid,$mode) {	    if($mode == 'categories') {            $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"        SELECT          `crdate`        FROM          $this->dbTable1        WHERE          `deleted` = 0          AND          `hidden`  = 0          AND          `pid` IN (" . intval($pid). ")          AND          `category` = " . intval($uid) . "          ORDER BY            `crdate` DESC      ");            if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {        $row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);        $content  = array();        $content['count']       = $GLOBALS['TYPO3_DB']->sql_num_rows($res);        $content['last_added']  = $row['crdate'];      } else {        $content = FALSE;      }    }        return $content;  }      function listImages($pid,$uid) {        $template = $this->cObj->getSubpart($this->templateCode,"###LIST_IMAGES###");    $subpart  = $this->cObj->getSubpart($template,"###ITEMS###");        $sort1    = $this->piVars['sort1'];    $sort2    = $this->piVars['sort2'];        if (      isset($sort1) &&       $sort1 == 'crdate' OR       $sort1 == 'title' OR       $sort1 == 'comments' OR       $sort1 == 'hits' OR       $sort1 == 'rating'    ) {      $sort_by = mysql_escape_string($sort1);    } else {      $sort1   = 'crdate';      $sort_by = 'crdate';    }         $sort_crdate    = $sort1 == 'crdate' ? $this->conf['sort_crdate'] : $this->pi_linkTP($this->conf['sort_crdate'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> 'crdate', $this->prefixId.'[sort2]'=> $sort2),'',$this->conf['list_pid']);    $sort_title     = $sort1 == 'title' ? $this->conf['sort_title'] : $this->pi_linkTP($this->conf['sort_title'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> 'title', $this->prefixId.'[sort2]'=> $sort2),'',$this->conf['list_pid']);    $sort_comments  = $sort1 == 'comments' ? $this->conf['sort_comments'] : $this->pi_linkTP($this->conf['sort_comments'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> 'comments', $this->prefixId.'[sort2]'=> $sort2),'',$this->conf['list_pid']);    $sort_hits      = $sort1 == 'hits' ? $this->conf['sort_hits'] : $this->pi_linkTP($this->conf['sort_hits'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> 'hits', $this->prefixId.'[sort2]'=> $sort2),'',$this->conf['list_pid']);    $sort_rating    = $sort1 == 'rating' ? $this->conf['sort_rating'] : $this->pi_linkTP($this->conf['sort_rating'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> 'rating', $this->prefixId.'[sort2]'=> $sort2),'',$this->conf['list_pid']);        $sort_spacer    = $this->conf['sort_spacer'];        // DESC / ASC    if(isset($sort2) && $sort2 == 'ASC' OR $sort2 == 'DESC') {      $sort_typ = mysql_escape_string($sort2);    } else {      $sort2    = 'DESC';      $sort_typ = 'DESC';    }        $sort_asc       = $sort2 == 'ASC' ? $this->conf['sort_asc'] : $this->pi_linkTP($this->conf['sort_asc'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> $sort1, $this->prefixId.'[sort2]'=> 'ASC'),'',$this->conf['list_pid']);    $sort_desc      = $sort2 == 'DESC' ? $this->conf['sort_desc'] : $this->pi_linkTP($this->conf['sort_desc'],array($this->prefixId.'[category]'=> $uid, $this->prefixId.'[sort1]'=> $sort1, $this->prefixId.'[sort2]'=> 'DESC'),'',$this->conf['list_pid']);        $markerArray['###SORT###'] = $sort_crdate.$sort_spacer.$sort_title.$sort_spacer.$sort_comments.$sort_spacer.$sort_hits.$sort_spacer.$sort_rating.$this->conf['sort_spacer2'].$sort_asc.' / ' .$sort_desc;        /* PAGEBROWSER INIT */    $enableFields = $this->cObj->enableFields($this->dbTable1);        $res_c = $GLOBALS['TYPO3_DB']->exec_SELECTquery(      'uid',       $this->dbTable1,      '`pid` IN(' . $pid . ') AND category = ' . $uid . '' . $enableFields    );        $count = $GLOBALS['TYPO3_DB']->sql_num_rows($res_c);        if (!isset($this->piVars['page'])) $this->piVars['page'] = 0;    $limit = $this->piVars['page'] * $this->conf['listImageLimit'] . "," . $this->conf['listImageLimit'];    /* PAGEBROWSER END INIT */      $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        img.*,        cat.`name` AS category_name      FROM        $this->dbTable1 img        LEFT JOIN $this->dbTable2 cat ON cat.`uid` = " . intval($uid) . "      WHERE        img.`deleted` = 0        AND        img.`hidden`  = 0        AND        img.`pid` IN (" . intval($pid). ")        AND        img.`category` = " . intval($uid) . "      ORDER BY        img.$sort_by $sort_typ      LIMIT " . $limit) or die (mysql_error());            $content = ''; #init            if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {              while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {                  $imgTSConfig                    = array();          $imgTSConfig['file']            = 'uploads/tx_mhsimplegallery/' . $row['image'];                    if($this->conf['listProportional'] == '1') {            $imgTSConfig['file.']['width']    = $this->conf['listImageMaxWidth'];            $imgTSConfig['file.']['height']   = $this->conf['listImageMaxHeight'];          } else {                      /* DEVELOPMENT */            $pictureSize  = getimagesize($imgTSConfig['file']);                        if($pictureSize[0] > $pictureSize[1]) {              $factor = $this->conf['listImageMaxWidth']/$pictureSize[0];            } else {              $factor = $this->conf['listImageMaxHeight']/$pictureSize[1];            }                        $pictureWidth   = ($this->conf['listImageMaxWidth'] *= $factor);            $pictureHeight  = ($this->conf['listImageMaxHeight'] *= $factor);                        $imgTSConfig['file.']['width']  = $pictureWidth;            $imgTSConfig['file.']['height'] = $pictureHeight;          }                    $imgTSConfig['altText']         = htmlentities($row['title']);          $imgTSConfig['titleText']       = htmlentities($row['title']);          $imgTSConfig['params']          = $this->conf['listImageParams'];                    $subMarkerArray['###NAME###']   = $this->pi_linkTP(htmlentities($row['title']),array($this->prefixId.'[image]'=> $row['uid']),'',$this->conf['single_pid']);          $subMarkerArray['###IMAGE###']  = $this->pi_linkTP($this->cObj->IMAGE($imgTSConfig),array($this->prefixId.'[image]'=> $row['uid']),'',$this->conf['single_pid']);                    $subMarkerArray['###USERINFO###'] = $this->getAuthor($row['cruser_id']);          $subMarkerArray['###DATE###']     = date($this->conf['dateConf'],$row['crdate']);          $subMarkerArray['###COMMENTS###'] = $row['comments'] > 0 ? $row['comments'] : '0';          $subMarkerArray['###RATING###']   = $this->getRatingImage($row['rating']);                    $describtion = preg_replace("/[^ ]*$/", '...', substr($row['describtion'], 0, 200));                    $subMarkerArray['###DESC###']     = htmlentities(trim($describtion));                    $markerArray['###CATEGORY_TITLE###'] = $row['category_name'];          $content .= $this->cObj->substituteMarkerArrayCached($subpart, $subMarkerArray);          $subpartArray['###ITEMS###'] = $content;        }                /* PAGEBROWSER START */        $wrapArr = array(          'browseBoxWrap'           => '<div class="browseBoxWrap">|</div>',          'showResultsWrap'         => '<div class="showResultsWrap">|</div>',          'browseLinksWrap'         => '<div class="browseLinksWrap">|</div>',          'showResultsNumbersWrap'  => '<span class="showResultsNumbersWrap">|</span>',          'disabledLinkWrap'        => '<span class="disabledLinkWrap">|</span>',          'inactiveLinkWrap'        => '<span class="inactiveLinkWrap">|</span>',          'activeLinkWrap'          => '<span class="activeLinkWrap">|</span>'        );          $this->internal['res_count']          = $count;        $this->internal['currentTable']       = $this->dbTable1;         $this->internal['results_at_a_time']  = $this->conf['listImageLimit'];        $this->internal['maxPages']           = $this->conf['maxPages'];        $this->internal['showRange']          = $this->conf['showRange'];        $this->internal['showFirstLast']      = $this->conf['showFirstLast'];        $this->internal['showResultCount']    = $this->conf['showResultCount'];        $this->internal['dontLinkActivePage'] = $this->conf['dontLinkActivePage'];        $this->internal['pagefloat']          = $this->conf['pagefloat'];                $markerArray['###PAGEBROWSER###'] = $this->pi_list_browseresults(0,'',$wrapArr,'page');        /* PAGEBROWSER END */      }    return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);  }        function getAuthor($uid) {    $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        `username`      FROM        `fe_users`      WHERE        `deleted` = 0        AND        `hidden`  = 0      LIMIT 1    ");              if(@$GLOBALS['TYPO3_DB']->sql_num_rows($res)) {      $row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);      return htmlentities(trim($row['username']));    } else {      return $this->conf['anonymous'];    }  }        function initRating($uid,$ip,$rating = '0',$mode = 'CHECK') {    if($mode == 'CHECK') {      $checkRatingTable = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"SELECT * FROM $this->dbTable4 WHERE ip = '$ip' AND image = '" . intval($uid) . "' AND logdate = CURDATE()");       if(!$GLOBALS['TYPO3_DB']->sql_num_rows($checkRatingTable)) {          if($rating >= 0 && $rating < 6) {            return TRUE;          }      }    } elseif ($mode == 'UPDATE') {      $resRatingCount = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"SELECT COUNT(`uid`) AS entries, SUM(`rate`) AS sum_rate FROM $this->dbTable4 WHERE image = '" . intval($uid) . "'");      $getRatingCount = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($resRatingCount);            $rating = ($getRatingCount['sum_rate']/$getRatingCount['entries']);      return $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"UPDATE $this->dbTable1 SET `rating` = '$rating' WHERE uid = '$uid'");    }    return FALSE;  }        function getRateForm($uid,$ip,$rating) {        if($this->initRating($uid,$ip,$rating)) {      $template = $this->cObj->getSubpart($this->templateCode,"###RATE_FORM###");      $markerArray['###REFEREE###'] = t3lib_div::getIndpEnv('TYPO3_REQUEST_URL');    } else {      $template = $this->cObj->getSubpart($this->templateCode,"###RATE_FORM_ALLREADY_RATED###");    }    return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);  }        function getRatingImage($value) {    $value = $value > 0 ? round($value) : '0';    if($value == 0) {      return '<img src="typo3conf/ext/' . $this->extKey . '/res/0stars.gif" class="mhsimplegallery_rating" />';    } elseif($value == 1) {      return '<img src="typo3conf/ext/' . $this->extKey . '/res/1star.gif" class="mhsimplegallery_rating" />';    } elseif($value <= 5) {      return '<img src="typo3conf/ext/' . $this->extKey . '/res/' . $value . 'stars.gif" class="mhsimplegallery_rating" />';    } else {      return '<img src="typo3conf/ext/' . $this->extKey . '/res/0stars.gif" class="mhsimplegallery_rating" />';    }  }        function getImage($uid) {        $rating     = t3lib_div::_GP('rating');    $referee    = t3lib_div::_GP('referee');    $cruser_id  = $GLOBALS['TSFE']->fe_user->user['uid'] > 0 ? $GLOBALS['TSFE']->fe_user->user['uid'] : '0';    $IP         = t3lib_div::getIndpEnv('REMOTE_ADDR');        if($rating) {      if($this->initRating($uid,$IP,$rating)) {        $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"INSERT INTO " . $this->dbTable4 . " SET `rate` = '" . intval($rating) . "', `logdate` = NOW(), `ip` = '" . $IP . "', `image` = '" . $uid . "', cruser_id = '" . $cruser_id . "'");        $this->initRating($uid,'','','UPDATE');        header('Location: ' . t3lib_div::locationHeaderUrl($referee));        exit();      }    }        $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        img.*,        cat.`name` AS category_name      FROM        " . $this->dbTable1 . " img        LEFT JOIN " . $this->dbTable2 . " cat ON cat.`uid` = img.`category`      WHERE        img.`deleted` = 0        AND        img.`hidden`  = 0        AND        img.`uid` =  " . intval($uid)    );        if(@$GLOBALS['TYPO3_DB']->sql_num_rows($res)) {            $template = $this->cObj->getSubpart($this->templateCode,"###SINGLE_IMAGE###");            $row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);            $imgTSConfig = array(); #init      $imgTSConfig['file']  = 'uploads/tx_mhsimplegallery/' . $row['image'];            $this->fileFunc = t3lib_div::makeInstance("t3lib_basicFileFunctions");            $ImageSize = $this->fileFunc->getTotalFileInfo($imgTSConfig['file']);      $markerArray['###IMAGE_SIZE###'] = round($ImageSize['size']/1024);            $imgObj = t3lib_div::makeInstance('t3lib_stdGraphic');      $ImageDimensions = $imgObj->getImageDimensions($imgTSConfig['file']);      $markerArray['###IMAGE_DIMENSION###'] = $ImageDimensions[0].' x '.$ImageDimensions[1];            if($this->conf['singleProportional'] == '1') {        $imgTSConfig['file.']['maxW'] = $this->conf['singleImageMaxWidth'];        $imgTSConfig['file.']['maxH'] = $this->conf['singleImageMaxHeight'];      } else {        $imgTSConfig['file.']['width']  = $this->conf['singleImageMaxWidth'];        $imgTSConfig['file.']['height'] = $this->conf['singleImageMaxHeight'];      }            // check if lightbox ext. is installed and init      if (t3lib_extMgm::isLoaded('kj_imagelightbox2')) {        $imgTSConfig['imageLightbox2'] = 1;        $imgTSConfig['imageLightbox2.']['caption'] = htmlentities($row['title']);      }            $imgTSConfig['altText']         = htmlentities($row['title']);      $imgTSConfig['titleText']       = htmlentities($row['title']);      $imgTSConfig['params']          = $this->conf['singleImageParams'];      $markerArray['###NAME###']      = htmlentities($row['title']);      $markerArray['###IMAGE###']     = $this->cObj->IMAGE($imgTSConfig);      $markerArray['###USERINFO###']  = $this->getAuthor($row['cruser_id']);      $markerArray['###DATE###']      = date($this->conf['dateConf'],$row['crdate']);      $markerArray['###COMMENTS###']  = $row['comments'] > 0 ? $row['comments'] : '0';      $markerArray['###RATING###']    = $this->getRatingImage($row['rating']);      $markerArray['###RATE###']      = $this->getRateForm($uid,$IP,$row['rating']);      $markerArray['###DESC###']      = htmlentities(trim($row['describtion']));            $markerArray['###IMAGE_LINK###']      = $imgTSConfig['file'];      $markerArray['###CATEGORY_TITLE###']  = $row['category_name'];      $markerArray['###BACK###']      = $this->pi_linkTP($this->cObj->stdWrap($this->conf['back_to_gallery'],$this->conf['back_to_gallery.']),array($this->prefixId . '[category]' => $row['category']),'',$this->conf['list_pid']);          } else {          $template = $this->cObj->getSubpart($this->templateCode,"###ERROR###");      $markerArray['###TEXT###'] = $this->conf['error_noImage'];          }        return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);  }        function displayForm($pid) {      $postFormId   = t3lib_div::_GP('formid');    $postVarArray = t3lib_div::_GP('mh_simplegallery_postVar');        $markerArray['###MAX_HEIGHT###']  = $this->conf['addPicture_maxHeight'];    $markerArray['###MAX_WIDTH###']   = $this->conf['addPicture_maxWidth'];    $markerArray['###CATEGORY###']    = $this->getCategorieSelectField($pid);        $imgObj = t3lib_div::makeInstance('t3lib_stdGraphic');        $query = FALSE;        if($this->conf['addPicture_register'] == 1 && $GLOBALS['TSFE']->fe_user->user['uid'] > 0) {      $template = $this->cObj->getSubpart($this->templateCode,"###FEFORM###");            if($postFormId) {                foreach($postVarArray AS $field => $var) {          $var = htmlentities(trim($var));          $postVar[$field] = $var;        }                if($postVar['title'] != "" && $_FILES['image']['name']) {          if($_FILES['image']['name']) {                        $this->fileFunc = t3lib_div::makeInstance("t3lib_basicFileFunctions");            $sauber = $this->fileFunc->cleanFileName($_FILES['image']['name']);            $unique = $this->fileFunc->getUniqueName($sauber, "uploads/tx_mhsimplegallery/");                        // Bildgroeße abchecken ...            $fileInfo = $this->fileFunc->getTotalFileInfo($_FILES['image']['tmp_name']);            $imageDimensions = $imgObj->getImageDimensions($_FILES['image']['tmp_name']);                        if(              ($fileInfo['size']/1024) <= $this->conf['addPicture_maxSize'] &&               $imageDimensions[0] <= $this->conf['addPicture_maxWidth'] &&               $imageDimensions[1] <= $this->conf['addPicture_maxHeight']) {                            move_uploaded_file($_FILES['image']['tmp_name'],$unique);              $temp_unique  = explode('/',$unique);                  $uploadName   = $temp_unique[2];                            $insertArray = array(                'pid'         => $pid,                'crdate'      => time(),                'tstamp'      => time(),                'cruser_id'   => $GLOBALS['TSFE']->fe_user->user['uid'],                'hidden'      => $this->conf['addPicture_hidden'],                'category'    => $postVar['category'],                'title'       => $postVar['title'],                'describtion' => $postVar['desc'],                'image'       => $uploadName,                'comments'    => '0',                'hits'        => '1',                'rating'      => '0',              );            }          }        }      }    }    elseif ($this->conf['addPicture_register'] == 0)     {      $template = $this->cObj->getSubpart($this->templateCode,"###FEFORM###");            if($postFormId) {                foreach($postVarArray AS $field => $var) {          $var = htmlentities(trim($var));          $postVar[$field] = $var;        }                if($postVar['title'] != "" && $_FILES['image']['name']) {                  if($_FILES['image']['name']) {            require_once (PATH_t3lib .'class.t3lib_basicfilefunc.php');                        $this->fileFunc = t3lib_div::makeInstance("t3lib_basicFileFunctions");            $sauber = $this->fileFunc->cleanFileName($_FILES['image']['name']);            $unique = $this->fileFunc->getUniqueName($sauber, "uploads/tx_mhsimplegallery/");                        // Bildgroeße abchecken ...            $fileInfo = $this->fileFunc->getTotalFileInfo($_FILES['image']['tmp_name']);            $imageDimensions = $imgObj->getImageDimensions($_FILES['image']['tmp_name']);                        #die(var_dump($imageDimensions));                        if(              ($fileInfo['size']/1024) <= $this->conf['addPicture_maxSize'] &&               $imageDimensions[0] <= $this->conf['addPicture_maxWidth'] &&               $imageDimensions[1] <= $this->conf['addPicture_maxHeight']) {                            move_uploaded_file($_FILES['image']['tmp_name'],$unique);              $temp_unique  = explode('/',$unique);                  $uploadName   = $temp_unique[2];                            $insertArray = array(                'pid'         => $pid,                'crdate'      => time(),                'tstamp'      => time(),                'cruser_id'   => '0',                'hidden'      => $this->conf['addPicture_hidden'],                'category'    => $postVar['category'],                'title'       => $postVar['title'],                'describtion' => $postVar['desc'],                'image'       => $uploadName,                'comments'    => '0',                'hits'        => '1',                'rating'      => '0',              );            }          }        }      }    } else {      $template = $this->cObj->getSubpart($this->templateCode,"###ERROR###");      $markerArray['###TEXT###'] = $this->conf['error_addPicture_register'];    }        if($query = $GLOBALS['TYPO3_DB']->INSERTquery($this->dbTable1, $insertArray)) {      if($GLOBALS['TYPO3_DB']->sql(TYPO3_db, $query)) {        if($this->conf['addPicture_hidden'] == 0) {          header('LOCATION: ' . t3lib_div::locationHeaderUrl($this->pi_getPageLink($this->conf['single_pid'],'',array($this->prefixId.'[image]'=> mysql_insert_id()))));          exit();        } else {          $template = $this->cObj->getSubpart($this->templateCode,"###FEFORM_SUCCESS###");        }      }    } elseif(!$query && $postFormId) {      $template = $this->cObj->getSubpart($this->templateCode,"###FEFORM_ERROR###");    }        return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);  }        function initComments($pid) {    $valid    = FALSE; #init    $formId   = t3lib_div::_GP('formid');    $antispam = t3lib_div::_GP('antispam');    $image    = $this->piVars['image'];    $content  = ''; #init        $content .= $this->getComments($pid);        // form send with a possible new comment?    if($formId) {      // check if captcha ext. is installed and init      if (t3lib_extMgm::isLoaded('captcha') && t3lib_div::_GP('mh_simplegallery_text') != '') {        session_start();        $captchaStr = $_SESSION['tx_captcha_string'];        $_SESSION['tx_captcha_string'] = '';        if ($captchaStr != "" && $captchaStr == t3lib_div::_GP('captcha_response')) {          $valid = TRUE;        }      } elseif(t3lib_div::_GP('mh_simplegallery_text') != '') {        $valid = TRUE;      }            if($valid == TRUE) {        $insertArray = array(          'pid'         => $pid,          'crdate'      => time(),          'cruser_id'   => $GLOBALS['TSFE']->fe_user->user['uid'],          'hidden'      => 0,          'image'       => $image,          'name'        => t3lib_div::_GP('mh_simplegallery_name'),          'text'        => t3lib_div::_GP('mh_simplegallery_text')        );                $GLOBALS['TYPO3_DB']->sql(TYPO3_db, $GLOBALS['TYPO3_DB']->INSERTquery($this->dbTable3, $insertArray));                $GLOBALS['TYPO3_DB']->sql(TYPO3_db, "          UPDATE            " . $this->dbTable1 . "          SET            comments = comments+1          WHERE            uid = " . intval($image)        );                $pageURL = $this->pi_getPageLink($this->conf['single_pid'],'',array($this->prefixId.'[image]'=> $image));        $pageURL .= '#comments';                header('LOCATION: ' . t3lib_div::locationHeaderUrl($pageURL));              } else {                $template = $this->cObj->getSubpart($this->templateCode,"###COMMENT_FORM###");        $markerArray['###ERROR###'] = $this->cObj->stdWrap($this->conf['error_commentAdd'], $this->conf['error_commentAdd.']);                      if($GLOBALS['TSFE']->fe_user->user['uid'] > 0) {          $markerArray['###NAME###']  = $GLOBALS['TSFE']->fe_user->user['username'];        } else {          $markerArray['###NAME###']  = '<input type="text" name="mh_simplegallery_name" id="name" size="40" value="' . t3lib_div::_GP('mh_simplegallery_name') . '" />';        }                if (t3lib_extMgm::isLoaded('captcha')) {          $markerArray['###CAPTCHA###'] = '<label for="captcha"><img src="'.t3lib_extMgm::siteRelPath('captcha').'captcha/captcha.php" alt="" /></label> <input size="30" type="text" name="captcha_response" id="captcha_response" /><br />';        } else {          $markerArray['###CAPTCHA###'] = '';        }                $markerArray['###TEXT###']  = t3lib_div::_GP('mh_simplegallery_text');                $content .= $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);              }    } else {          $template = $this->cObj->getSubpart($this->templateCode,"###COMMENT_FORM###");      $markerArray['###ERROR###'] = '';            if($GLOBALS['TSFE']->fe_user->user['uid'] > 0) {        $markerArray['###NAME###']  = $GLOBALS['TSFE']->fe_user->user['username'];      } else {        $markerArray['###NAME###']  = '<input type="text" name="mh_simplegallery_name" id="name" size="40" />';      }            if (t3lib_extMgm::isLoaded('captcha')) {        $markerArray['###CAPTCHA###'] = '<label for="captcha"><img src="'.t3lib_extMgm::siteRelPath('captcha').'captcha/captcha.php" alt="" /></label> <input size="30" type="text" name="captcha_response" id="captcha_response" /><br />';      } else {        $markerArray['###CAPTCHA###'] = '';      }            $markerArray['###TEXT###']  = '';            $content .= $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);          }    return $content;  }        function getComments($pid) {        $template   = $this->cObj->getSubpart($this->templateCode,"###COMMENTS_LIST###");    $subpart_1  = $this->cObj->getSubpart($template,"###ITEMS###");    $subpart_2  = $this->cObj->getSubpart($template,"###NO_COMMENTS###");        $uid = $this->piVars['image'];        /* PAGEBROWSER INIT */    $enableFields = $this->cObj->enableFields($this->dbTable3);        $res_c = $GLOBALS['TYPO3_DB']->exec_SELECTquery(      'uid',       $this->dbTable3,      '`pid` IN(' . $pid . ') AND `image` = ' . intval($uid) . ' ' . $enableFields    );        $count = $GLOBALS['TYPO3_DB']->sql_num_rows($res_c);        if (!isset($this->piVars['page'])) $this->piVars['page'] = 0;    $limit = $this->piVars['page'] * $this->conf['listCommentsLimit'] . "," . $this->conf['listCommentsLimit'];    /* PAGEBROWSER END INIT */        $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        *      FROM        " . $this->dbTable3 . "      WHERE        `hidden` = 0        AND        `deleted` = 0        AND        `pid` IN (" . intval($pid). ")        AND        `image` = " . intval($uid) . "      ORDER BY        " . $this->conf['listCommentsOrderby'] . "      LIMIT " . $limit    ) or die (mysql_error());            $content = ''; #init            if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {        $subpartArray['###NO_COMMENTS###'] = '';        while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {          if($row['cruser_id'] > 0) {            $subMarkerArray['###NAME###'] = $this->getUserName($row['cruser_id']);          } else {            $subMarkerArray['###NAME###'] = htmlentities(trim($row['name']));          }                    $subMarkerArray['###TEXT###'] = htmlentities(trim($row['text']));          $subMarkerArray['###DATE###'] = date($this->conf['dateConf'], $row['crdate']);                    $content .= $this->cObj->substituteMarkerArrayCached($subpart_1, $subMarkerArray);        }        $subpartArray['###ITEMS###'] = $content;              } else {        $subpartArray['###ITEMS###'] = '';        $subMarkerArray['###TEXT###'] = $this->pi_getLL('error_noComments');        $content = $this->cObj->substituteMarkerArrayCached($subpart_2, $subMarkerArray);        $subpartArray['###NO_COMMENTS###'] = $content;      }          return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);  }        function initPath($path,$uid,$pid) {        $filetype = array('png','jpg','jpeg');        $dirty    = array();    $images   = array();        if(is_dir($path)) {      if ($handle = opendir($path)) {        while (false !== ($file = readdir($handle))) {          if ($file != "." && $file != "..") {            $dirty[] = $file;          }        }        closedir($handle);      }    }       foreach($dirty AS $dirtyFile) {      $fileExt = explode('.',$dirtyFile);      if(in_array($fileExt[1],$filetype)) {        $images[] = $dirtyFile;      }    }        foreach($images AS $image)  {      if(!$this->pathImageStatus($path.$image)) {              $this->fileFunc = t3lib_div::makeInstance("t3lib_basicFileFunctions");        $sauber = $this->fileFunc->cleanFileName($image);        $unique = $this->fileFunc->getUniqueName($sauber, "uploads/tx_mhsimplegallery/");                // Bildgroeße abchecken ...        $fileInfo = $this->fileFunc->getTotalFileInfo($path.$image);        $imgSize  = getimagesize($path.$image);                if(          ($fileInfo['size']/1024) <= $this->conf['addPicture_maxSize'] &&           $imgSize[0] <= $this->conf['addPicture_maxWidth'] &&           $imgSize[1] <= $this->conf['addPicture_maxHeight']) {                    if(copy($path.$image,$unique)) {            $insertArray = array(              'pid'         => $pid,              'crdate'      => time(),              'tstamp'      => time(),              #'cruser_id'   => $GLOBALS['TSFE']->fe_user->user['uid'],              'hidden'      => $this->conf['addPicture_hidden'],              'category'    => $uid,              'title'       => $image,              #'describtion' => $postVar['desc'],              'image'       => $image,              'comments'    => '0',              'hits'        => '1',              'rating'      => '0',              'path_id'     => $path.$image,            );            $query = $GLOBALS['TYPO3_DB']->INSERTquery($this->dbTable1, $insertArray);            $GLOBALS['TYPO3_DB']->sql(TYPO3_db, $query);          }        }      }    }    return true;  }        function pathImageStatus($image) {    $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"      SELECT        uid      FROM        " . $this->dbTable1 . "      WHERE        `hidden` = 0        AND        `deleted` = 0        AND        `path_id` = '" . $image . "'    ") or die (mysql_error());        if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {      return TRUE;    } else {      return FALSE;    }  }        function editForm($pid) {         $uid = $this->piVars['image'];    $cid = $this->piVars['category'];        if($GLOBALS['TSFE']->fe_user->user['uid'] > 0) {      if($uid > 0) {        $this->editImage($uid);      } elseif($cid > 0) {        $this->editCategory($cid);      } else {                $x = t3lib_div::_GP('mh_simplegallery_delCat');        if($x && is_array($x)) {          foreach($x AS $postVar => $tempCatId) {            $this->deleteCategory($postVar);          }          header("LOCATION: index.php?id=" . $GLOBALS['TSFE']->id);        }        // List / Add categories ...        $template = $this->cObj->getSubpart($this->templateCode,"###EDIT_CATEGORIES###");        $subpart  = $this->cObj->getSubpart($template,"###ITEMS###");        $content  = ''; #init                $res = $GLOBALS['TYPO3_DB']->sql(TYPO3_db,"          SELECT            *          FROM            `$this->dbTable2`          WHERE            `deleted` = 0            AND            `pid` IN (" . intval($pid). ")            AND            `cruser_id` = " . $GLOBALS['TSFE']->fe_user->user['uid'] . "          ORDER BY            `name` ASC         ");                $markerArray['###LANG_EDIT_CATEGORIES_NAME###']           = $this->pi_getLL('edit_categories_name');        $markerArray['###LANG_EDIT_CATEGORIES_LATEST_IMAGES###']  = $this->pi_getLL('edit_categories_latest_image');        $markerArray['###LANG_EDIT_CATEGORIES_DELETE###']         = $this->pi_getLL('edit_categories_delete');        $markerArray['###LANG_EDIT_CATEGORIES_CONFIRM###']        = $this->pi_getLL('edit_categories_confirm');        $markerArray['###LANG_EDIT_CATEGORIES_HEADER1###']        = $this->pi_getLL('edit_categories_header1');        $markerArray['###LANG_EDIT_CATEGORIES_STATUS###']         = $this->pi_getLL('edit_categories_status');                $ll_public  = $this->pi_getLL('public');        $ll_private = $this->pi_getLL('private');               if($GLOBALS['TYPO3_DB']->sql_num_rows($res)) {          while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {            $markerArray['###UID###']                 = $row['uid'];            $markerArray['###NAME###']                = $this->pi_linkTP(htmlentities($row['name']),array($this->prefixId . '[category]' => $row['uid']),'',$GLOBALS['TSFE']->id);            $markerArray['###LATEST_IMAGES###']       = $this->getLatestImages($pid,$row['uid'],80,0,$GLOBALS['TSFE']->id);            $markerArray['###LINK_TO_GALLERY###']     = $this->pi_linkTP($this->cObj->stdWrap($this->pi_getLL('edit_gallery'),$this->conf['edit_gallery.']),array($this->prefixId . '[category]' => $row['uid']),'',$GLOBALS['TSFE']->id);            $markerArray['###STATUS###']              = $row['public'] == 1 ? $ll_public : $ll_private;                        $content .= $this->cObj->substituteMarkerArrayCached($subpart, $markerArray);            $subpartArray['###ITEMS###'] = $content;          }        }        return $this->cObj->substituteMarkerArrayCached($template,$markerArray,$subpartArray);      }    }     }  } // END CLASSif (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/mh_simplegallery/pi1/class.tx_mhsimplegallery_pi1.php'])	{	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/mh_simplegallery/pi1/class.tx_mhsimplegallery_pi1.php']);}?>